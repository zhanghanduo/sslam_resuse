%YAML:1.0

# common parameters
# support: 1 imu 1 cam; 1 imu 2 cam: 2 cam;
imu: 0
ins: 1
num_of_cam: 2

# gps_fusion set to 1 means use gps (confirmed to be low covariance and stable)
# to help visual SLAM to create a pose graph as prior map.
# Otherwise realtime online pose estimation with or without prior map.
# Note: gps_fusion set to 0 only if you set ins to 1.
gps_fusion: 0

# If cubicle set to 1, then you have to open cubicle_detect process to generate cubicle_topic in obstacle msgs format!
# Otherwise you will not be able to correctly start the system.
# We suggest set cubicle to 0 in open area or on low computation capability platform.
# Set to 1 in heavy traffic area.
cubicle: 1

# If disparity set to 1, then it uses external disparity map to conduct stereo matching.
# Otherwise, it uses left-right optical flow to build correspondences.
disparity: 1

# If gps_initial is set to 1, then the initial robot body pose is aligned with GPS orientation
# at the initial moment, for visualization.
gps_initial: 1

imu_topic: ""
ins_topic: "/gps_inspva"
image0_topic: "/left/image_rect"
image1_topic: "/right/image_rect"
cubicle_topic: "/obs_map"
gps_topic: "/gps_position"

# whether calculate localization covariance
covariance_output: 0

cam0_calib: "left_av1.yaml"
cam1_calib: "left_av1.yaml"

image_width: 960
image_height: 604

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
  # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
  # 2  Don't know anything about extrinsic parameters. You don't need to give R,T.
# We will try to calibrate it. Do some rotation movement at beginning.

# Extrinsic homogeneous rotation and translation matrix from Camera to IMU/INS.

body_T_cam0: !!opencv-matrix
  rows: 4
  cols: 4
  dt: d
  data: [ 0.01561343, -0.12043877,  0.99259797, 4.6987353991585241,
          -0.9998776,  -0.00287765,  0.01537877, 0,
          0.00100415, -0.99271659, -0.12046896, -9.6655685080665099e-01, 0., 0., 0., 1. ]

body_T_cam1: !!opencv-matrix
  rows: 4
  cols: 4
  dt: d
  data: [ 0.01561343, -0.12043877,  0.99259797, 4.6987353991585241,
          -0.9998776,  -0.00287765,  0.01537877, -0.4997527702,
          0.00100415, -0.99271659, -0.12046896, -9.6655685080665099e-01, 0., 0., 0., 1. ]

# Multiple thread support
multiple_thread: 1

#feature tracker parameters
max_cnt: 220            # max feature number in feature tracking
# min distance between two features
min_dist: 30
F_threshold: 1.0        # RANSAC threshold (pixel)
show_track: 1           # publish tracking image as topic
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy

#optimization parameters
max_solver_time: 0.09              # max solver iteration time (ms), to guarantee real time
max_num_iterations: 10             # max solver iteration, to guarantee real time
keyframe_parallax: 15.0            # keyframe selection threshold (pixel)
ransac_reproj_error: 0.025         # RANSAC error tolerance (10 pixel / virtual focal length 460)

#unsynchronization parameters
estimate_td: 0                     # online estimate time offset between camera and imu
td: 0.007                            # initial value of time offset. unit: s. reading image clock + td = real image clock (IMU clock)
# 0.1097

#loop closure parameters
load_previous_pose_graph: 1            # load and reuse previous pose graph; load from 'pose_graph_save_path'.
display_previous_trajectory: 1         # If load previous pose graph, option whether display the previous trajectory.
pose_graph_save_name: "chinbee_2.bin"   # save and load path
save_image: 0                          # save image in pose graph for visualization propose; you can close this function by setting 0
