%YAML:1.0

# common parameters
# support: 1 imu 1 cam; 1 imu 2 cam: 2 cam;
imu: 0
ins: 1
num_of_cam: 2

# Online set to 0 means offline processing to create a pose graph as prior map. (not guarantee realtime)
# Otherwise realtime online pose estimation with or without prior map.
# Note: online set to 1 only if you set ins to 1.
online: 1

# If cubicle set to 1, then you have to open cubicle_detect process to generate cubicle_topic in obstacle msgs format!
# Otherwise you will not be able to correctly start the system.
# We suggest set cubicle to 0 in open area or on low computation capability platform.
# Set to 1 in heavy traffic area.
cubicle: 1

# If gps_initial is set to 1, then the initial robot body pose is aligned with GPS orientation
# at the initial moment, for visualization.
gps_initial: 1

imu_topic: ""
ins_topic: "/gps_inspva"
image0_topic: "/left/image_rect"
image1_topic: "/right/image_rect"
cubicle_topic: "/obs_map"
gps_topic: "/gps_position"

cam0_calib: "left_av1.yaml"
cam1_calib: "left_av1.yaml"


image_width: 960
image_height: 604
   

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T.
                        # We will try to calibrate it. Do some rotation movement at beginning.

# Extrinsic homogeneous rotation and translation matrix from Camera to IMU/INS.

# 1. For November jurong island config.

body_T_cam0: !!opencv-matrix
  rows: 4
  cols: 4
  dt: d
  data: [ 2.0473981084132564e-03, -1.4382624113514997e-01, 9.8960083898606288e-01, 8.1690523754217335e+00,
          -9.9989445490494944e-01, -1.4528496647906008e-02, -4.2842573447110510e-05, 2.0927455954197672e-01,
          1.4383574358273366e-02, -9.8949630375564612e-01, -1.4384080659741372e-01, -4.2640219702252380e-01, 0., 0., 0., 1. ]
body_T_cam1: !!opencv-matrix
  rows: 4
  cols: 4
  dt: d
  data: [ 2.7506072428620243e-03, -1.4405835811582984e-01, 9.8956537106790821e-01, 8.1638218633820259e+00,
          -9.9989402076713785e-01, -1.4543342518268831e-02, 6.6213482209004360e-04, -2.9719831725109869e-01,
          1.4296202080336828e-02, -9.8946231896185299e-01, -1.4408309394481544e-01, -4.1843235778140758e-01, 0., 0., 0., 1. ]

# 2. For Oct Soon Lee config.
#body_T_cam0: !!opencv-matrix
#  rows: 4
#  cols: 4
#  dt: d
#  data: [ 2.0473981084132564e-03, -1.4382624113514997e-01, 9.8960083898606288e-01, 8.1690523754217335e+00,
#          -9.9989445490494944e-01, -1.4528496647906008e-02, -4.2842573447110510e-05, 2.1227455954197672e-01,
#          1.4383574358273366e-02, -9.8949630375564612e-01, -1.4384080659741372e-01, -4.2640219702252380e-01, 0., 0., 0., 1. ]
#body_T_cam1: !!opencv-matrix
#  rows: 4
#  cols: 4
#  dt: d
#  data: [ 2.7506072428620243e-03, -1.4405835811582984e-01, 9.8956537106790821e-01, 8.1638218633820259e+00,
#          -9.9989402076713785e-01, -1.4543342518268831e-02, 6.6213482209004360e-04, -2.9719831725109869e-01,
#          1.4296202080336828e-02, -9.8946231896185299e-01, -1.4408309394481544e-01, -4.1843235778140758e-01, 0., 0., 0., 1. ]
# Multiple thread support
multiple_thread: 1

#feature tracker parameters
max_cnt: 180            # max feature number in feature tracking
# min distance between two features
min_dist: 30
F_threshold: 1.0        # RANSAC threshold (pixel)
show_track: 1           # publish tracking image as topic
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy

#optimization parameters
max_solver_time: 0.11   # max solver iteration time (ms), to guarantee real time
max_num_iterations: 10  # max solver iteration, to guarantee real time
keyframe_parallax: 15.0  # keyframe selection threshold (pixel)
ransac_reproj_error: 0.003

#unsynchronization parameters
estimate_td: 0                     # online estimate time offset between camera and imu
td: 0.35                          # initial value of time offset. unit: s. reading image clock + td = real image clock (IMU clock)
# 0.1097
# 1. Nov Jurong Island 0.6
# 2. Oct Soon Lee 0.32
#loop closure parameters
load_previous_pose_graph: 0            # load and reuse previous pose graph; load from 'pose_graph_save_path'.
display_previous_trajectory: 1         # If load previous pose graph, option whether display the previous trajectory.
pose_graph_save_name: "jurong_island.bin"   # save and load path
save_image: 0                          # save image in pose graph for visualization propose; you can close this function by setting 0
