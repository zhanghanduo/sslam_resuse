%YAML:1.0

#common parameters
#support: 1 imu 1 cam; 1 imu 2 cam: 2 cam; 
imu: 0         
num_of_cam: 2
# if cubicle set to 1, then you have to open cubicle_detect process to generate cubicle_topic in obstacle msgs format!
# Otherwise you will not be able to correctly start the system.
cubicle: 0

imu_topic: ""
image0_topic: "/left/image_rect"
image1_topic: "/right/image_rect"
cubicle_topic: "/obs_map"
output_path: "~/output"

cam0_calib: "cam0_pinhole.yaml"
cam1_calib: "cam0_pinhole.yaml"
image_width: 960
image_height: 604
   

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.

body_T_cam0: !!opencv-matrix
  rows: 4
  cols: 4
  dt: d
  data: [1, 0, 0, 0,
         0, 1, 0, 0,
         0, 0, 1, 0,
         0, 0, 0, 1]

body_T_cam1: !!opencv-matrix
  rows: 4
  cols: 4
  dt: d
  data: [1, 0, 0, 0.500327139352947,
         0, 1, 0, 0,
         0, 0, 1, 0,
         0, 0, 0, 1]

#Multiple thread support
multiple_thread: 1
#Gpu acceleration support
use_gpu: 1
use_gpu_acc_flow: 1

#feature tracker parameters
max_cnt: 240            # max feature number in feature tracking
min_dist: 30            # min distance between two features 
freq: 0                # frequency (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequency will be same as raw image
F_threshold: 1.0        # RANSAC threshold (pixel)
show_track: 1           # publish tracking image as topic
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy

#optimization parameters
max_solver_time: 0.08  # max solver iteration time (ms), to guarantee real time
max_num_iterations: 10   # max solver iteration, to guarantee real time
keyframe_parallax: 15.0 # keyframe selection threshold (pixel)

#loop closure parameters
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "~/output/pose_graph/" # save and load path
save_image: 0                   # save image in pose graph for visualization propose; you can close this function by setting 0
